trigger:
  branches:
    include:
      - dev
      - staging
      - master

pr:
  branches:
    include:
      - staging
      - master

variables:
  buildConfiguration: 'Release'

pool:
  name: agent1  # your custom self-hosted agent

stages:
# ---------------------- STAGE 1: BUILD ----------------------
- stage: Build
  displayName: 'Build & Test'
  jobs:
    - job: BuildAndTest
      steps:
        - task: UseDotNet@2
          inputs:
            packageType: 'sdk'
            version: '8.0.x'

        - script: dotnet restore
          displayName: 'Restore Dependencies'

        - script: dotnet build --configuration $(buildConfiguration)
          displayName: 'Build Project'

        - script: dotnet test --no-build --verbosity normal
          displayName: 'Run Tests'

        - script: dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/output
          displayName: 'Publish App'

        - task: ArchiveFiles@2
          displayName: 'Create ZIP Package'
          inputs:
            rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/output'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/webapp.zip'
            replaceExistingArchive: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact'
          inputs:
            pathToPublish: '$(Build.ArtifactStagingDirectory)/webapp.zip'
            artifactName: 'drop'

# ---------------------- STAGE 2: DEV DEPLOY ----------------------
- stage: Deploy_Dev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'dev'))
  jobs:
    - deployment: DeployDev
      environment: 'dev'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureWebApp@1
                displayName: 'Deploy to Dev App'
                inputs:
                  azureSubscription: 'azureconnection1'
                  appType: 'webApp'  # for Windows App Service
                  appName: 'webappDev2'
                  package: '$(Pipeline.Workspace)/drop/webapp.zip'

# ---------------------- STAGE 3: STAGING DEPLOY ----------------------
- stage: Deploy_Staging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'staging'))
  jobs:
    - deployment: DeployStaging
      environment: 'staging'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureWebApp@1
                displayName: 'Deploy to Staging App'
                inputs:
                  azureSubscription: 'azureconnection1'
                  appType: 'webApp'
                  appName: 'webApp-Staging2'
                  package: '$(Pipeline.Workspace)/drop/webapp.zip'

# ---------------------- STAGE 4: PROD DEPLOY ----------------------
- stage: Deploy_Prod
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  jobs:
    - deployment: DeployProd
      environment: 'prod'
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureWebApp@1
                displayName: 'Deploy to Production App'
                inputs:
                  azureSubscription: 'azureconnection1'
                  appType: 'webApp'
                  appName: 'webappProd2'
                  package: '$(Pipeline.Workspace)/drop/webapp.zip'
